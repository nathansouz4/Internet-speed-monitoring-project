import sched
import numpy as np
import pandas as pd
import time
from datetime import datetime
import speedtest
import matplotlib.pyplot as plt

st = speedtest.Speedtest()
servernames = [22461]

scheduler = sched.scheduler()

# server 22461: Cabo Servicos de Telecomunicacoes LTDA
# Interface do programa
def print_header():
    """Exibe o cabeçalho da aplicação"""
    print('-----------------------------------------')
    print('       Teste - Velocidade Internet       ')
    print('-----------------------------------------\n\n')

print_header()
print('Testando a velocidade...\n')

# inicializando a lista que ira armazenar os registros de dia/hora/mes/ano
datetime = []

# inicializa as lista para armazernar as velocidades medidas
down = []
up = []
pi = []

def test_speed_network():
    aux_download = []
    aux_upload = []
    aux_pi = []
    aux_datetime = []
    #calcula velocidades de rede
    aux_download = '{:.2f}'.format(st.download() / (10 ** 6))
    aux_upload = '{:.2f}'.format(st.upload() / (10 ** 6))
    aux_ping = st.results.ping
    # Registra os horarios e dia da medição das velocidades de rede
    aux_datetime = time.ctime()
    # armazena numa lista
    down.append(aux_download)
    up.append(aux_upload)
    pi.append(aux_ping)
    datetime.append(aux_datetime)
    #roda o comando de sched
    scheduler.enter(delay=30, priority=-3, action=test_speed_network)

def df_speedtest():
    # Cria o dataframe com os dados de velocidades de rede registradas pelo programa
    data_speeds = {'Download': down, 'Upload': up, 'Ping': pi}
    data_speeds = pd.DataFrame(data_speeds, columns=['Download', 'Upload', 'Ping'])
    # cria o dataframe de horarios de realizacao dos testes de velocidade
    date_time = {'Datetime': datetime, }
    df_date_time = pd.DataFrame(date_time, columns=['Datetime'])
    # Junta os dois dataframe
    dados_concatenados = pd.concat([df_date_time, data_speeds], axis=1, join='inner')
    print(dados_concatenados)
    print('\n O próximo teste será realizado em 25 segundos...\n')
    scheduler.enter(delay=35, priority=-1, action=df_speedtest)

def network_graphs():
    plt.style.use("ggplot")
    x_pi = len(pi)
    # array com amostras das quantidades de testes de velocidade de rede realizados
    tests = np.linspace(start=0, stop=x_pi, num=x_pi)
    # criando as figuras
    fig1, ax1 = plt.subplots(figsize=(10, 5))
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    fig3, ax3 = plt.subplots(figsize=(10, 5))
    # plotando os graficos
    ax1.plot(tests, down, color='r', label='Download Speed')
    ax1.set(xlabel="Testes", ylabel="Velocidade de Download em Mb/s")
    ax2.plot(tests, up, color='b', label='Upload Speed')
    ax2.set(xlabel="Testes", ylabel="Velocidade de Upload em Mb/s")
    ax3.plot(tests, pi, color='m', label='Ping (ms)')
    ax3.set(xlabel="Testes", ylabel="Ping (ms)")
    fig1.savefig('Download')
    fig2.savefig('Upload')
    fig3.savefig('Ping')
    plt.show()
    print('Gerando gráficos...\n')


test_speed_network()
df_speedtest()
try:
    scheduler.run(blocking=True)
except KeyboardInterrupt:
    print('Programa finalziado.')
    network_graphs()
