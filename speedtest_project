import sched
import time

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

import speedtest

st = speedtest.Speedtest()
scheduler = sched.scheduler()
st.get_best_server()

__author__ = "Nathan Souza"
__copyright__ = "Copyright 2021, Monitoring internet speeds project"

# inicializando a lista que ira armazenar os registros de dia/hora/mes/ano
datetime = []

# inicializa as lista/variaveis que irão armazernar as velocidades medidas
download = []
upload = []
ping = []
excel_speedtest = pd.DataFrame()


# Interface do programa
def print_header():
    """Exibe o cabeçalho da aplicação"""
    print('------------------------------------------------')
    print('           Teste - Velocidade Internet          ')
    print('------------------------------------------------')
    

print(f'Author:{__author__}\n{__copyright__}\n')
print_header()
print('Para interromper o programa, pressione Crtl+C.\n')    


def delay(): 
    ok = False 
    delay_time = 0 
    while True:
        delay_time = input('Digite o intervalo em segundos entre cada teste de velocidade de internet:')
        if delay_time.isnumeric():
            delay_time = int(delay_time)
            ok = True
        else: 
            print('Digite apenas números!\n')
        if ok:
                break
    return delay_time    


delay_time = delay()


def test_internet_speed():
    print('\nTestando a velocidade...\n')
    # calcula velocidades da internet
    aux_download = float('{:.2f}'.format(st.download() / (10 ** 6)))
    aux_upload = float('{:.2f}'.format(st.upload() / (10 ** 6)))
    aux_ping = float(st.results.ping)
    # Registra os horarios e dia da medição das velocidades de rede
    aux_datetime = time.ctime()
    # armazena numa lista
    download.append(aux_download)
    upload.append(aux_upload)
    ping.append(aux_ping)
    datetime.append(aux_datetime)
    # roda o comando de sched
    scheduler.enter(delay=delay_time, priority=0, action=test_internet_speed)


def df_speedtest():
    # Cria o dataframe com os dados de velocidades de rede registradas pelo programa
    data_speeds = {'Download': download, 'Upload': upload, 'Ping': ping}
    data_speeds = pd.DataFrame(data_speeds, columns=['Download', 'Upload', 'Ping'])
    # cria o dataframe de horarios de realizacao dos testes de velocidade
    date_time = {'Datetime': datetime, }
    df_date_time = pd.DataFrame(date_time, columns=['Datetime'])
    # Junta os dois dataframe
    dados_speedtest = pd.concat([df_date_time, data_speeds], axis=1, join='inner')
    print(dados_speedtest)
    print(f'\n O próximo teste será realizado em {delay_time} segundos...\n')
    scheduler.enter(delay=delay_time, priority=1, action=df_speedtest)


def save_dataframe():
    global excel_speedtest
    # Cria o dataframe com os dados de velocidades de rede registradas pelo programa
    data_speeds = {'Download': download, 'Upload': upload, 'Ping': ping}
    data_speeds = pd.DataFrame(data_speeds, columns=['Download', 'Upload', 'Ping'])
    # cria o dataframe de horarios de realizacao dos testes de velocidade
    date_time = {'Datetime': datetime, }
    df_date_time = pd.DataFrame(date_time, columns=['Datetime'])
    # Junta os dois dataframe
    excel_speedtest = pd.concat([df_date_time, data_speeds], axis=1, join='inner')
    excel_speedtest.to_csv("dados_Speedtest.csv")


def internet_graphs():
    mean_download = np.mean(download)
    mean_upload = np.mean(upload)
    mean_ping = np.mean(ping)
    plt.style.use("ggplot")
    x_pi = len(ping)
    # array com amostras das quantidades de testes de velocidade de rede realizados
    tests = np.linspace(start=0, stop=x_pi, num=x_pi)
    # criando as figuras
    fig1, ax1 = plt.subplots(figsize=(10, 5))
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    fig3, ax3 = plt.subplots(figsize=(10, 5))
    # Plotando os graficos
    ax1.plot(tests, download, color='r', label='Download Speed. Média:{:.2f}'.format(mean_download))
    ax1.set(xlabel="Testes", ylabel="Velocidade de Download em Mb/s")
    ax1.legend(loc='best')
    ax2.plot(tests, upload, color='b', label='Upload Speed. Média:{:.2f}'.format(mean_upload))
    ax2.set(xlabel="Testes", ylabel="Velocidade de Upload em Mb/s")
    ax2.legend(loc='best')
    ax3.plot(tests, ping, color='m', label='Ping (ms). Média:{:.2f}'.format(mean_ping))
    ax3.set(xlabel="Testes", ylabel="Ping (ms)")
    ax3.legend(loc='best')
    fig1.savefig('Download')
    fig2.savefig('Upload')
    fig3.savefig('Ping')
    plt.show()
    print('Gerando gráficos...\n')


def provedor_internet():
    info = st.config
    print('\nIP:', info['client']['ip'])
    print('Provedor:', info['client']['isp'])
    print('País:', info['client']['country'])

                              


provedor_internet()
test_internet_speed()
df_speedtest()


try:
    scheduler.run(blocking=True)
except KeyboardInterrupt:
    save_dataframe()
    internet_graphs()
    print('Programa finalizado!')
